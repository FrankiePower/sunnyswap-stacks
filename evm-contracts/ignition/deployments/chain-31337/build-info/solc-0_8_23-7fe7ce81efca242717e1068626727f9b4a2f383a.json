{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_23-7fe7ce81efca242717e1068626727f9b4a2f383a",
  "solcVersion": "0.8.23",
  "solcLongVersion": "0.8.23+commit.f704f362",
  "userSourceNameMap": {
    "contracts/STXEscrowFactory.sol": "project/contracts/STXEscrowFactory.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Create2.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev There's no code to deploy.\n     */\n    error Create2EmptyBytecode();\n\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n        if (bytecode.length == 0) {\n            revert Create2EmptyBytecode();\n        }\n        assembly (\"memory-safe\") {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n            // if no address was created, and returndata is not empty, bubble revert\n            if and(iszero(addr), not(iszero(returndatasize()))) {\n                let p := mload(0x40)\n                returndatacopy(p, 0, returndatasize())\n                revert(p, returndatasize())\n            }\n        }\n        if (addr == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Errors.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "project/contracts/BaseEscrow.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.23;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { AddressLib, Address } from \"./libraries/AddressLib.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport { ImmutablesLib } from \"./libraries/ImmutablesLib.sol\";\nimport { Timelocks, TimelocksLib } from \"./libraries/TimelocksLib.sol\";\n\nimport { IBaseEscrow } from \"./interfaces/IBaseEscrow.sol\";\n\n/**\n * @title Base abstract Escrow contract for cross-chain atomic swap.\n * @dev {IBaseEscrow-withdraw}, {IBaseEscrow-cancel} and _validateImmutables functions must be implemented in the derived contracts.\n * @custom:security-contact security@1inch.io\n */\nabstract contract BaseEscrow is IBaseEscrow {\n    using AddressLib for Address;\n    using SafeERC20 for IERC20;\n    using TimelocksLib for Timelocks;\n    using ImmutablesLib for Immutables;\n\n    // Token that is used to access public withdraw or cancel functions.\n    IERC20 private immutable _ACCESS_TOKEN;\n\n    /// @notice See {IBaseEscrow-RESCUE_DELAY}.\n    uint256 public immutable RESCUE_DELAY;\n    /// @notice See {IBaseEscrow-FACTORY}.\n    address public immutable FACTORY = msg.sender;\n\n    constructor(uint32 rescueDelay, IERC20 accessToken) {\n        RESCUE_DELAY = rescueDelay;\n        _ACCESS_TOKEN = accessToken;\n    }\n\n    modifier onlyTaker(Immutables calldata immutables) {\n        if (msg.sender != immutables.taker.get()) revert InvalidCaller();\n        _;\n    }\n\n    modifier onlyMaker(Immutables calldata immutables) {\n        if (msg.sender != immutables.maker.get()) revert InvalidCaller();\n        _;\n    }\n\n    modifier onlyValidImmutables(Immutables calldata immutables) virtual {\n        _validateImmutables(immutables);\n        _;\n    }\n\n    modifier onlyValidSecret(bytes32 secret, Immutables calldata immutables) {\n        if (_sha256Bytes32(secret) != immutables.hashlock) revert InvalidSecret();\n        _;\n    }\n\n    modifier onlyAfter(uint256 start) {\n        if (block.timestamp < start) revert InvalidTime();\n        _;\n    }\n\n    modifier onlyBefore(uint256 stop) {\n        if (block.timestamp >= stop) revert InvalidTime();\n        _;\n    }\n\n    modifier onlyAccessTokenHolder() {\n        if (_ACCESS_TOKEN.balanceOf(msg.sender) == 0) revert InvalidCaller();\n        _;\n    }\n\n    /**\n     * @notice See {IBaseEscrow-rescueFunds}.\n     */\n    function rescueFunds(address token, uint256 amount, Immutables calldata immutables)\n        external\n        onlyTaker(immutables)\n        onlyValidImmutables(immutables)\n        onlyAfter(immutables.timelocks.rescueStart(RESCUE_DELAY))\n    {\n        _uniTransfer(token, msg.sender, amount);\n        emit FundsRescued(token, amount);\n    }\n\n    /**\n     * @dev Transfers ERC20 or native tokens to the recipient.\n     */\n    function _uniTransfer(address token, address to, uint256 amount) internal {\n        if (token == address(0)) {\n            _ethTransfer(to, amount);\n        } else {\n            IERC20(token).safeTransfer(to, amount);\n        }\n    }\n\n    /**\n     * @dev Transfers native tokens to the recipient.\n     */\n    function _ethTransfer(address to, uint256 amount) internal {\n        (bool success,) = to.call{ value: amount }(\"\");\n        if (!success) revert NativeTokenSendingFailure();\n    }\n\n    /**\n     * @dev Should verify that the computed escrow address matches the address of this contract.\n     */\n    function _validateImmutables(Immutables calldata immutables) internal view virtual;\n\n    /**\n     * @dev Computes the SHA-256 hash of the secret (Bitcoin compatible).\n     * @param secret The secret that unlocks the escrow.\n     * @return ret The computed hash.\n     */\n    function _sha256Bytes32(bytes32 secret) private pure returns (bytes32 ret) {\n        return sha256(abi.encodePacked(secret));\n    }\n}\n"
      },
      "project/contracts/Escrow.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.23;\n\nimport { Create2 } from \"@openzeppelin/contracts/utils/Create2.sol\";\n\nimport { ImmutablesLib } from \"./libraries/ImmutablesLib.sol\";\nimport { ProxyHashLib } from \"./libraries/ProxyHashLib.sol\";\n\nimport { IEscrow } from \"./interfaces/IEscrow.sol\";\nimport { BaseEscrow } from \"./BaseEscrow.sol\";\n\n/**\n * @title Abstract Escrow contract for cross-chain atomic swap.\n * @dev {IBaseEscrow-withdraw} and {IBaseEscrow-cancel} functions must be implemented in the derived contracts.\n * @custom:security-contact security@1inch.io\n */\nabstract contract Escrow is BaseEscrow, IEscrow {\n    using ImmutablesLib for Immutables;\n\n    /// @notice See {IEscrow-PROXY_BYTECODE_HASH}.\n    bytes32 public immutable PROXY_BYTECODE_HASH = ProxyHashLib.computeProxyBytecodeHash(address(this));\n\n\n    /**\n     * @dev Verifies that the computed escrow address matches the address of this contract.\n     */\n    function _validateImmutables(Immutables calldata immutables) internal view virtual override {\n        bytes32 salt = immutables.hash();\n        if (Create2.computeAddress(salt, PROXY_BYTECODE_HASH, FACTORY) != address(this)) {\n            revert InvalidImmutables();\n        }\n    }\n}\n"
      },
      "project/contracts/interfaces/IBaseEscrow.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { Address } from \"../libraries/AddressLib.sol\";\n\nimport { Timelocks } from \"../libraries/TimelocksLib.sol\";\n\n/**\n * @title Base Escrow interface for cross-chain atomic swap.\n * @notice Interface implies locking funds initially and then unlocking them with verification of the secret presented.\n * @custom:security-contact security@1inch.io\n */\ninterface IBaseEscrow {\n    struct Immutables {\n        bytes32 orderHash;\n        bytes32 hashlock;  // Hash of the secret.\n        Address maker;\n        Address taker;\n        Address token;\n        uint256 amount;\n        uint256 safetyDeposit;\n        Timelocks timelocks;\n    }\n\n    /**\n     * @notice Emitted on escrow cancellation.\n     */\n    event EscrowCancelled();\n\n    /**\n     * @notice Emitted when funds are rescued.\n     * @param token The address of the token rescued. Zero address for native token.\n     * @param amount The amount of tokens rescued.\n     */\n    event FundsRescued(address token, uint256 amount);\n\n    /**\n     * @notice Emitted on successful withdrawal.\n     * @param secret The secret that unlocks the escrow.\n     */\n    event EscrowWithdrawal(bytes32 secret);\n\n    error InvalidCaller();\n    error InvalidImmutables();\n    error InvalidSecret();\n    error InvalidTime();\n    error NativeTokenSendingFailure();\n\n    /* solhint-disable func-name-mixedcase */\n    /// @notice Returns the delay for rescuing funds from the escrow.\n    function RESCUE_DELAY() external view returns (uint256);\n    /// @notice Returns the address of the factory that created the escrow.\n    function FACTORY() external view returns (address);\n    /* solhint-enable func-name-mixedcase */\n\n    /**\n     * @notice Withdraws funds to a predetermined recipient.\n     * @dev Withdrawal can only be made during the withdrawal period and with secret with hash matches the hashlock.\n     * The safety deposit is sent to the caller.\n     * @param secret The secret that unlocks the escrow.\n     * @param immutables The immutables of the escrow contract.\n     */\n    function withdraw(bytes32 secret, Immutables calldata immutables) external;\n\n    /**\n     * @notice Cancels the escrow and returns tokens to a predetermined recipient.\n     * @dev The escrow can only be cancelled during the cancellation period.\n     * The safety deposit is sent to the caller.\n     * @param immutables The immutables of the escrow contract.\n     */\n    function cancel(Immutables calldata immutables) external;\n\n    /**\n     * @notice Rescues funds from the escrow.\n     * @dev Funds can only be rescued by the taker after the rescue delay.\n     * @param token The address of the token to rescue. Zero address for native token.\n     * @param amount The amount of tokens to rescue.\n     * @param immutables The immutables of the escrow contract.\n     */\n    function rescueFunds(address token, uint256 amount, Immutables calldata immutables) external;\n}\n"
      },
      "project/contracts/interfaces/IEscrow.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IBaseEscrow } from \"./IBaseEscrow.sol\";\n\n/**\n * @title Escrow interface for cross-chain atomic swap.\n * @notice Interface implies locking funds initially and then unlocking them with verification of the secret presented.\n * @custom:security-contact security@1inch.io\n */\ninterface IEscrow is IBaseEscrow {\n    /// @notice Returns the bytecode hash of the proxy contract.\n    function PROXY_BYTECODE_HASH() external view returns (bytes32); // solhint-disable-line func-name-mixedcase\n}\n"
      },
      "project/contracts/interfaces/ISTXEscrowFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { Address } from \"../libraries/AddressLib.sol\";\nimport { IBaseEscrow } from \"./IBaseEscrow.sol\";\n\n/**\n * @title STX Escrow Factory interface for EVM-Stacks atomic swaps\n * @notice Interface for creating Stacks atomic swap escrows\n * @dev Supports both EVM→STACKS and STACKS→EVM swap directions\n * @custom:security-contact security@sunnyswap.io\n */\ninterface ISTXEscrowFactory {\n    \n    /// @notice Thrown when insufficient ETH is sent for escrow creation\n    error InsufficientEscrowBalance();\n\n    /**\n     * @notice Emitted when a source escrow is created (EVM→STACKS)\n     * @param escrow The address of the created source escrow\n     * @param hashlock The hash of the secret\n     * @param maker The address of the maker\n     * @param creator The address of who created the escrow\n     */\n    event SrcEscrowCreated(\n        address escrow, \n        bytes32 hashlock, \n        Address maker, \n        address indexed creator\n    );\n\n    /**\n     * @notice Emitted when a destination escrow is created (STACKS→EVM)\n     * @param escrow The address of the created destination escrow\n     * @param hashlock The hash of the secret\n     * @param taker The address of the taker\n     * @param creator The address of who created the escrow\n     */\n    event DstEscrowCreated(\n        address escrow, \n        bytes32 hashlock, \n        Address taker, \n        address indexed creator\n    );\n\n    /**\n     * @notice Creates a source escrow for EVM→STACKS swaps\n     * @dev Maker creates this escrow with EVM tokens, taker will provide Stacks\n     * @param immutables The escrow immutables including Stacks parameters\n     */\n    function createSrcEscrow(IBaseEscrow.Immutables calldata immutables) external payable;\n\n    /**\n     * @notice Creates a destination escrow for STACKS→EVM swaps\n     * @dev Taker creates this escrow with EVM tokens, maker will provide Stacks  \n     * @param immutables The escrow immutables including Stacks parameters\n     */\n    function createDstEscrow(IBaseEscrow.Immutables calldata immutables) external payable;\n\n    /**\n     * @notice Returns the deterministic address of a source escrow\n     * @param immutables The escrow immutables\n     * @return The computed address of the source escrow\n     */\n    function addressOfEscrowSrc(IBaseEscrow.Immutables calldata immutables) external view returns (address);\n\n    /**\n     * @notice Returns the deterministic address of a destination escrow\n     * @param immutables The escrow immutables\n     * @return The computed address of the destination escrow\n     */\n    function addressOfEscrowDst(IBaseEscrow.Immutables calldata immutables) external view returns (address);\n\n    /**\n     * @notice Returns the source escrow implementation address\n     * @return The address of the source escrow implementation\n     */\n    function STX_ESCROW_SRC_IMPLEMENTATION() external view returns (address);\n\n    /**\n     * @notice Returns the destination escrow implementation address\n     * @return The address of the destination escrow implementation\n     */\n    function STX_ESCROW_DST_IMPLEMENTATION() external view returns (address);\n} "
      },
      "project/contracts/libraries/AddressLib.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.23;\n\n/**\n * @title Address type for 1inch contracts\n * @notice Utility library for Address type operations  \n */\n\ntype Address is uint256;\n\nlibrary AddressLib {\n    function get(Address addr) internal pure returns (address) {\n        return address(uint160(Address.unwrap(addr)));\n    }\n\n    function wrap(address addr) internal pure returns (Address) {\n        return Address.wrap(uint256(uint160(addr)));\n    }\n} "
      },
      "project/contracts/libraries/ImmutablesLib.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { IBaseEscrow } from \"../interfaces/IBaseEscrow.sol\";\n\n/**\n * @title Library for escrow immutables.\n * @custom:security-contact security@1inch.io\n */\nlibrary ImmutablesLib {\n    uint256 internal constant ESCROW_IMMUTABLES_SIZE = 0x100;\n\n    /**\n     * @notice Returns the hash of the immutables.\n     * @param immutables The immutables to hash.\n     * @return ret The computed hash.\n     */\n    function hash(IBaseEscrow.Immutables calldata immutables) internal pure returns(bytes32 ret) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, immutables, ESCROW_IMMUTABLES_SIZE)\n            ret := keccak256(ptr, ESCROW_IMMUTABLES_SIZE)\n        }\n    }\n\n    /**\n     * @notice Returns the hash of the immutables.\n     * @param immutables The immutables to hash.\n     * @return ret The computed hash.\n     */\n    function hashMem(IBaseEscrow.Immutables memory immutables) internal pure returns(bytes32 ret) {\n        assembly (\"memory-safe\") {\n            ret := keccak256(immutables, ESCROW_IMMUTABLES_SIZE)\n        }\n    }\n}\n"
      },
      "project/contracts/libraries/ProxyHashLib.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @title Library for computing proxy bytecode hash.\n * @custom:security-contact security@1inch.io\n */\nlibrary ProxyHashLib {\n    /**\n     * @notice Computes the bytecode hash of a minimal proxy contract.\n     * @param implementation The address of the implementation contract.\n     * @return The keccak256 hash of the proxy bytecode.\n     */\n    function computeProxyBytecodeHash(address implementation) internal pure returns (bytes32) {\n        bytes memory bytecode = abi.encodePacked(\n            hex\"3d602d80600a3d3981f3363d3d373d3d3d363d73\",\n            implementation,\n            hex\"5af43d82803e903d91602b57fd5bf3\"\n        );\n        return keccak256(bytecode);\n    }\n}\n"
      },
      "project/contracts/libraries/TimelocksLib.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Timelocks for the destination chain plus the deployment timestamp.\n * Timelocks store the number of seconds from the time the contract is deployed to the start of a specific period.\n * For illustrative purposes, it is possible to describe timelocks by the structure:\n * struct DstTimelocks {\n *     uint256 withdrawal;\n *     uint256 publicWithdrawal;\n *     uint256 cancellation;\n * }\n *\n * withdrawal: Period when only the taker with a secret can withdraw tokens for maker (destination chain).\n * publicWithdrawal: Period when anyone with a secret can withdraw tokens for maker (destination chain).\n * cancellation: Period when escrow can only be cancelled by the taker.\n *\n * @custom:security-contact security@1inch.io\n */\ntype Timelocks is uint256;\n\n/**\n * @title Timelocks library for compact storage of timelocks in a uint256.\n */\nlibrary TimelocksLib {\n    enum Stage {\n        DstWithdrawal,\n        DstPublicWithdrawal,\n        DstCancellation\n    }\n\n    uint256 private constant _DEPLOYED_AT_MASK = 0xffffffff00000000000000000000000000000000000000000000000000000000;\n    uint256 private constant _DEPLOYED_AT_OFFSET = 224;\n\n    /**\n     * @notice Sets the Escrow deployment timestamp.\n     * @param timelocks The timelocks to set the deployment timestamp to.\n     * @param value The new Escrow deployment timestamp.\n     * @return The timelocks with the deployment timestamp set.\n     */\n    function setDeployedAt(Timelocks timelocks, uint256 value) internal pure returns (Timelocks) {\n        return Timelocks.wrap((Timelocks.unwrap(timelocks) & ~uint256(_DEPLOYED_AT_MASK)) | value << _DEPLOYED_AT_OFFSET);\n    }\n\n    /**\n     * @notice Returns the start of the rescue period.\n     * @param timelocks The timelocks to get the rescue delay from.\n     * @return The start of the rescue period.\n     */\n    function rescueStart(Timelocks timelocks, uint256 rescueDelay) internal pure returns (uint256) {\n        unchecked {\n            return rescueDelay + (Timelocks.unwrap(timelocks) >> _DEPLOYED_AT_OFFSET);\n        }\n    }\n\n    /**\n     * @notice Returns the timelock value for the given stage.\n     * @param timelocks The timelocks to get the value from.\n     * @param stage The stage to get the value for.\n     * @return The timelock value for the given stage.\n     */\n    function get(Timelocks timelocks, Stage stage) internal pure returns (uint256) {\n        uint256 data = Timelocks.unwrap(timelocks);\n        uint256 bitShift = uint256(stage) * 32;\n        // The maximum uint32 value will be reached in 2106.\n        return (data >> _DEPLOYED_AT_OFFSET) + uint32(data >> bitShift);\n    }\n}\n"
      },
      "project/contracts/STXEscrowDst.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { AddressLib, Address } from \"./libraries/AddressLib.sol\";\nimport { Timelocks, TimelocksLib } from \"./libraries/TimelocksLib.sol\";\n\nimport { IBaseEscrow } from \"./interfaces/IBaseEscrow.sol\";\nimport { BaseEscrow } from \"./BaseEscrow.sol\";\nimport { Escrow } from \"./Escrow.sol\";\n\n/**\n * @title STX Destination Escrow for Stacks→EVM atomic swaps\n * @notice Escrow contract for STX→EVM swaps - holds ERC20/ETH, releases on secret reveal\n * @dev Used when Stacks is the source and EVM tokens are the destination\n * @custom:security-contact security@sunnyswap.io\n */\ncontract STXEscrowDst is Escrow {\n    using SafeERC20 for IERC20;\n    using AddressLib for Address;\n    using TimelocksLib for Timelocks;\n\n    /// @notice Stacks transaction hash for verification (optional)\n    mapping(bytes32 => string) public stacksTxHashes;\n\n    /// @notice Stacks addresses for verification (optional)\n    mapping(bytes32 => string) public stacksAddresses;\n\n    event StacksTxHashRecorded(bytes32 indexed hashlock, string stxTxHash);\n    event StacksAddressRecorded(bytes32 indexed hashlock, string stxAddress);\n\n    constructor(uint32 rescueDelay, IERC20 accessToken) BaseEscrow(rescueDelay, accessToken) {}\n\n    // Allow contract to receive ETH\n    receive() external payable {}\n\n    /**\n     * @notice Private withdrawal by maker using secret\n     * @dev Maker reveals secret to claim EVM tokens after providing Stacks\n     * @param secret The secret that matches the hashlock\n     * @param immutables The escrow immutables\n     */\n    function withdraw(bytes32 secret, Immutables calldata immutables)\n        external\n        override\n        onlyValidImmutables(immutables)\n        onlyValidSecret(secret, immutables)\n        onlyAfter(immutables.timelocks.get(TimelocksLib.Stage.DstWithdrawal))\n        onlyBefore(immutables.timelocks.get(TimelocksLib.Stage.DstCancellation))\n    {\n        // Allow both maker and taker to withdraw in private period\n        if (msg.sender != immutables.maker.get() && msg.sender != immutables.taker.get()) {\n            revert InvalidCaller();\n        }\n\n        _withdraw(secret, immutables);\n    }\n\n    /**\n     * @notice Public withdrawal by anyone with access token\n     * @dev Anyone with access token can trigger withdrawal in public period\n     * @param secret The secret that matches the hashlock\n     * @param immutables The escrow immutables\n     */\n    function publicWithdraw(bytes32 secret, Immutables calldata immutables)\n        external\n        onlyAccessTokenHolder()\n        onlyValidImmutables(immutables)\n        onlyValidSecret(secret, immutables)\n        onlyAfter(immutables.timelocks.get(TimelocksLib.Stage.DstPublicWithdrawal))\n        onlyBefore(immutables.timelocks.get(TimelocksLib.Stage.DstCancellation))\n    {\n        _withdraw(secret, immutables);\n    }\n\n    /**\n     * @notice Cancels escrow and returns funds to taker\n     * @dev Can only be called after cancellation period starts\n     * @param immutables The escrow immutables\n     */\n    function cancel(Immutables calldata immutables)\n        external\n        override\n        onlyTaker(immutables)\n        onlyValidImmutables(immutables)\n        onlyAfter(immutables.timelocks.get(TimelocksLib.Stage.DstCancellation))\n    {\n        // Return tokens to taker\n        _uniTransfer(immutables.token.get(), immutables.taker.get(), immutables.amount);\n        // Return safety deposit to taker\n        _ethTransfer(immutables.taker.get(), immutables.safetyDeposit);\n        \n        emit EscrowCancelled();\n    }\n\n    /**\n     * @notice Records Stacks transaction hash for verification\n     * @dev Optional function to link Stacks transaction to escrow\n     * @param hashlock The escrow hashlock\n     * @param stxTxHash The Stacks transaction hash\n     * @param immutables The escrow immutables\n     */\n    function recordStacksTx(\n        bytes32 hashlock,\n        string calldata stxTxHash,\n        Immutables calldata immutables\n    )\n        external\n        onlyValidImmutables(immutables)\n    {\n        // Only maker or taker can record Stacks tx\n        if (msg.sender != immutables.maker.get() && msg.sender != immutables.taker.get()) {\n            revert InvalidCaller();\n        }\n\n        stacksTxHashes[hashlock] = stxTxHash;\n        emit StacksTxHashRecorded(hashlock, stxTxHash);\n    }\n\n    /**\n     * @notice Records Stacks address for verification\n     * @dev Optional function to link Stacks address to escrow\n     * @param hashlock The escrow hashlock\n     * @param stxAddress The Stacks address\n     * @param immutables The escrow immutables\n     */\n    function recordStacksAddress(\n        bytes32 hashlock,\n        string calldata stxAddress,\n        Immutables calldata immutables\n    )\n        external\n        onlyValidImmutables(immutables)\n    {\n        // Only maker or taker can record Stacks address\n        if (msg.sender != immutables.maker.get() && msg.sender != immutables.taker.get()) {\n            revert InvalidCaller();\n        }\n\n        stacksAddresses[hashlock] = stxAddress;\n        emit StacksAddressRecorded(hashlock, stxAddress);\n    }\n\n    /**\n     * @notice Gets recorded Stacks transaction hash\n     * @param hashlock The escrow hashlock\n     * @return The Stacks transaction hash\n     */\n    function getStacksTxHash(bytes32 hashlock) external view returns (string memory) {\n        return stacksTxHashes[hashlock];\n    }\n\n    /**\n     * @notice Gets recorded Stacks address\n     * @param hashlock The escrow hashlock\n     * @return The Stacks address\n     */\n    function getStacksAddress(bytes32 hashlock) external view returns (string memory) {\n        return stacksAddresses[hashlock];\n    }\n\n    /**\n     * @dev Internal withdrawal logic\n     * @param secret The secret that unlocks the escrow\n     * @param immutables The escrow immutables\n     */\n    function _withdraw(bytes32 secret, Immutables calldata immutables) internal {\n        // Transfer tokens to maker\n        _uniTransfer(immutables.token.get(), immutables.maker.get(), immutables.amount);\n        \n        // Return safety deposit to taker\n        _ethTransfer(immutables.taker.get(), immutables.safetyDeposit);\n        \n        emit EscrowWithdrawal(secret);\n    }\n} "
      },
      "project/contracts/STXEscrowFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { Create2 } from \"@openzeppelin/contracts/utils/Create2.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { AddressLib, Address } from \"./libraries/AddressLib.sol\";\nimport { ImmutablesLib } from \"./libraries/ImmutablesLib.sol\";\nimport { TimelocksLib, Timelocks } from \"./libraries/TimelocksLib.sol\";\nimport { ProxyHashLib } from \"./libraries/ProxyHashLib.sol\";\n\nimport { IBaseEscrow } from \"./interfaces/IBaseEscrow.sol\";\nimport { ISTXEscrowFactory } from \"./interfaces/ISTXEscrowFactory.sol\";\nimport { STXEscrowDst } from \"./STXEscrowDst.sol\";\nimport { STXEscrowSrc } from \"./STXEscrowSrc.sol\";\n\n/**\n * @title STX Escrow Factory for EVM-Stacks atomic swaps\n * @notice Factory contract for creating Stacks atomic swap escrows\n * @dev Supports both EVM→STX and STX→EVM swap directions\n * @custom:security-contact security@sunnyswap.io\n */\ncontract STXEscrowFactory is ISTXEscrowFactory, Ownable {\n    using SafeERC20 for IERC20;\n    using AddressLib for Address;\n    using TimelocksLib for Timelocks;\n\n    /// @notice Implementation contract for source escrows (EVM→STX)\n    address public immutable STX_ESCROW_SRC_IMPLEMENTATION;\n\n    /// @notice Implementation contract for destination escrows (STX→EVM)\n    address public immutable STX_ESCROW_DST_IMPLEMENTATION;\n\n    /// @notice Proxy bytecode hash for source escrows\n    bytes32 private immutable _PROXY_SRC_BYTECODE_HASH;\n\n    /// @notice Proxy bytecode hash for destination escrows\n    bytes32 private immutable _PROXY_DST_BYTECODE_HASH;\n\n    /// @notice Access token for public operations\n    IERC20 public immutable ACCESS_TOKEN;\n\n    /// @notice Creation fee in ETH\n    uint256 public creationFee;\n\n    /// @notice Treasury address for fee collection\n    address public treasury;\n\n    /// @notice Stacks network configuration\n    struct StacksConfig {\n        uint256 minConfirmations;    // Minimum Stacks confirmations\n        uint256 dustThreshold;       // Minimum STX amount in microSTX\n        uint256 maxAmount;           // Maximum STX amount in microSTX\n    }\n\n    StacksConfig public stacksConfig;\n\n    error InvalidFeeAmount();\n    error FeeTransferFailed();\n    error InvalidStacksAmount();\n    error InvalidStacksAddress();\n\n    event CreationFeeUpdated(uint256 oldFee, uint256 newFee);\n    event TreasuryUpdated(address oldTreasury, address newTreasury);\n    event StacksConfigUpdated(StacksConfig config);\n\n    constructor(\n        IERC20 accessToken,\n        address owner,\n        uint32 rescueDelaySrc,\n        uint32 rescueDelayDst,\n        uint256 _creationFee,\n        address _treasury,\n        StacksConfig memory _stacksConfig\n    ) Ownable(owner) {\n        ACCESS_TOKEN = accessToken;\n        creationFee = _creationFee;\n        treasury = _treasury;\n        stacksConfig = _stacksConfig;\n\n        // Deploy implementations\n        STX_ESCROW_SRC_IMPLEMENTATION = address(new STXEscrowSrc(rescueDelaySrc, accessToken));\n        STX_ESCROW_DST_IMPLEMENTATION = address(new STXEscrowDst(rescueDelayDst, accessToken));\n\n        // Compute proxy bytecode hashes\n        _PROXY_SRC_BYTECODE_HASH = ProxyHashLib.computeProxyBytecodeHash(STX_ESCROW_SRC_IMPLEMENTATION);\n        _PROXY_DST_BYTECODE_HASH = ProxyHashLib.computeProxyBytecodeHash(STX_ESCROW_DST_IMPLEMENTATION);\n    }\n\n    /**\n     * @notice Creates source escrow for EVM→STX swaps\n     * @param immutables Escrow immutables including Stacks details\n     */\n    function createSrcEscrow(IBaseEscrow.Immutables calldata immutables) external payable override {\n        // Note: Stacks validation handled at application level\n        \n        address token = immutables.token.get();\n        \n        // Calculate required ETH\n        uint256 requiredForEscrow = token == address(0) \n            ? immutables.amount + immutables.safetyDeposit\n            : immutables.safetyDeposit;\n            \n        uint256 totalRequired = requiredForEscrow + creationFee;\n        \n        if (msg.value != totalRequired) {\n            revert InsufficientEscrowBalance();\n        }\n\n        // Deploy escrow\n        address escrow = _deployEscrow(immutables, _PROXY_SRC_BYTECODE_HASH, requiredForEscrow);\n\n        // Transfer ERC20 tokens if needed\n        if (token != address(0)) {\n            IERC20(token).safeTransferFrom(msg.sender, escrow, immutables.amount);\n        }\n\n        _collectFee();\n        \n        emit SrcEscrowCreated(escrow, immutables.hashlock, immutables.maker, msg.sender);\n    }\n\n    /**\n     * @notice Creates destination escrow for STX→EVM swaps\n     * @param immutables Escrow immutables including Stacks details\n     */\n    function createDstEscrow(IBaseEscrow.Immutables calldata immutables) external payable override {\n        // Note: Stacks validation handled at application level\n        \n        address token = immutables.token.get();\n        \n        // Calculate required ETH\n        uint256 requiredForEscrow = token == address(0) \n            ? immutables.amount + immutables.safetyDeposit\n            : immutables.safetyDeposit;\n            \n        uint256 totalRequired = requiredForEscrow + creationFee;\n        \n        if (msg.value != totalRequired) {\n            revert InsufficientEscrowBalance();\n        }\n\n        // Deploy escrow\n        address escrow = _deployEscrow(immutables, _PROXY_DST_BYTECODE_HASH, requiredForEscrow);\n\n        // Transfer ERC20 tokens if needed\n        if (token != address(0)) {\n            IERC20(token).safeTransferFrom(msg.sender, escrow, immutables.amount);\n        }\n\n        _collectFee();\n        \n        emit DstEscrowCreated(escrow, immutables.hashlock, immutables.taker, msg.sender);\n    }\n\n    /**\n     * @notice Returns address of source escrow\n     */\n    function addressOfEscrowSrc(IBaseEscrow.Immutables calldata immutables) external view override returns (address) {\n        IBaseEscrow.Immutables memory modifiedImmutables = immutables;\n        modifiedImmutables.timelocks = immutables.timelocks.setDeployedAt(block.timestamp);\n        \n        bytes32 salt = ImmutablesLib.hashMem(modifiedImmutables);\n        return Create2.computeAddress(salt, _PROXY_SRC_BYTECODE_HASH, address(this));\n    }\n\n    /**\n     * @notice Returns address of destination escrow\n     */\n    function addressOfEscrowDst(IBaseEscrow.Immutables calldata immutables) external view override returns (address) {\n        IBaseEscrow.Immutables memory modifiedImmutables = immutables;\n        modifiedImmutables.timelocks = immutables.timelocks.setDeployedAt(block.timestamp);\n        \n        bytes32 salt = ImmutablesLib.hashMem(modifiedImmutables);\n        return Create2.computeAddress(salt, _PROXY_DST_BYTECODE_HASH, address(this));\n    }\n\n    /**\n     * @notice Updates creation fee (only owner)\n     * @param newFee New creation fee in wei\n     */\n    function setCreationFee(uint256 newFee) external onlyOwner {\n        uint256 oldFee = creationFee;\n        creationFee = newFee;\n        emit CreationFeeUpdated(oldFee, newFee);\n    }\n\n    /**\n     * @notice Updates treasury address (only owner)\n     * @param newTreasury New treasury address\n     */\n    function setTreasury(address newTreasury) external onlyOwner {\n        address oldTreasury = treasury;\n        treasury = newTreasury;\n        emit TreasuryUpdated(oldTreasury, newTreasury);\n    }\n\n    /**\n     * @notice Updates Stacks configuration (only owner)\n     * @param newConfig New Stacks configuration\n     */\n    function setStacksConfig(StacksConfig calldata newConfig) external onlyOwner {\n        stacksConfig = newConfig;\n        emit StacksConfigUpdated(newConfig);\n    }\n\n    /**\n     * @dev Validates Stacks-specific parameters\n     */\n    function _validateStacksParams(IBaseEscrow.Immutables calldata immutables) internal view {\n        // Validate STX amount is within bounds\n        if (immutables.amount < stacksConfig.dustThreshold || immutables.amount > stacksConfig.maxAmount) {\n            revert InvalidStacksAmount();\n        }\n\n        // Additional Stacks address validation can be added here\n    }\n\n    /**\n     * @dev Deploys escrow using Create2\n     */\n    function _deployEscrow(\n        IBaseEscrow.Immutables calldata immutables,\n        bytes32 proxyBytecodeHash,\n        uint256 ethAmount\n    ) internal returns (address) {\n        // Set deployment timestamp\n        IBaseEscrow.Immutables memory modifiedImmutables = immutables;\n        modifiedImmutables.timelocks = immutables.timelocks.setDeployedAt(block.timestamp);\n\n        // Compute salt and deploy escrow with Create2\n        bytes32 salt = ImmutablesLib.hashMem(modifiedImmutables);\n        \n        // Create minimal proxy bytecode\n        bytes memory bytecode = abi.encodePacked(\n            hex\"3d602d80600a3d3981f3363d3d373d3d3d363d73\",\n            proxyBytecodeHash == _PROXY_SRC_BYTECODE_HASH\n                ? STX_ESCROW_SRC_IMPLEMENTATION\n                : STX_ESCROW_DST_IMPLEMENTATION,\n            hex\"5af43d82803e903d91602b57fd5bf3\"\n        );\n\n        // Deploy escrow with required ETH\n        return Create2.deploy(ethAmount, salt, bytecode);\n    }\n\n    /**\n     * @dev Collects creation fee\n     */\n    function _collectFee() internal {\n        if (creationFee > 0 && treasury != address(0)) {\n            (bool success, ) = treasury.call{value: creationFee}(\"\");\n            if (!success) revert FeeTransferFailed();\n        }\n    }\n} "
      },
      "project/contracts/STXEscrowSrc.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { AddressLib, Address } from \"./libraries/AddressLib.sol\";\nimport { Timelocks, TimelocksLib } from \"./libraries/TimelocksLib.sol\";\n\nimport { IBaseEscrow } from \"./interfaces/IBaseEscrow.sol\";\nimport { BaseEscrow } from \"./BaseEscrow.sol\";\nimport { Escrow } from \"./Escrow.sol\";\n\n/**\n * @title STX Source Escrow for EVM→Stacks atomic swaps\n * @notice Escrow contract for EVM→STX swaps - holds ERC20/ETH, releases when taker provides secret\n * @dev Used when EVM tokens are the source and Stacks is the destination\n * @custom:security-contact security@sunnyswap.io\n */\ncontract STXEscrowSrc is Escrow {\n    using SafeERC20 for IERC20;\n    using AddressLib for Address;\n    using TimelocksLib for Timelocks;\n\n    /// @notice Stacks address where funds should be sent\n    mapping(bytes32 => string) public stacksAddresses;\n    \n    /// @notice Stacks transaction hash for verification (optional)\n    mapping(bytes32 => string) public stacksTxHashes;\n\n    event StacksAddressRecorded(bytes32 indexed hashlock, string stxAddress);\n    event StacksTxHashRecorded(bytes32 indexed hashlock, string stxTxHash);\n\n    constructor(uint32 rescueDelay, IERC20 accessToken) BaseEscrow(rescueDelay, accessToken) {}\n\n    // Allow contract to receive ETH\n    receive() external payable {}\n\n    /**\n     * @notice Private withdrawal by taker using secret\n     * @dev Taker reveals secret to claim EVM tokens after providing Stacks to maker\n     * @param secret The secret that matches the hashlock\n     * @param immutables The escrow immutables\n     */\n    function withdraw(bytes32 secret, Immutables calldata immutables)\n        external\n        override\n        onlyValidImmutables(immutables)\n        onlyValidSecret(secret, immutables)\n        onlyAfter(immutables.timelocks.get(TimelocksLib.Stage.DstWithdrawal))\n        onlyBefore(immutables.timelocks.get(TimelocksLib.Stage.DstCancellation))\n    {\n        // Allow both maker and taker to withdraw in private period\n        if (msg.sender != immutables.maker.get() && msg.sender != immutables.taker.get()) {\n            revert InvalidCaller();\n        }\n\n        _withdraw(secret, immutables);\n    }\n\n    /**\n     * @notice Public withdrawal by anyone with access token\n     * @dev Anyone with access token can trigger withdrawal in public period\n     * @param secret The secret that matches the hashlock\n     * @param immutables The escrow immutables\n     */\n    function publicWithdraw(bytes32 secret, Immutables calldata immutables)\n        external\n        onlyAccessTokenHolder()\n        onlyValidImmutables(immutables)\n        onlyValidSecret(secret, immutables)\n        onlyAfter(immutables.timelocks.get(TimelocksLib.Stage.DstPublicWithdrawal))\n        onlyBefore(immutables.timelocks.get(TimelocksLib.Stage.DstCancellation))\n    {\n        _withdraw(secret, immutables);\n    }\n\n    /**\n     * @notice Cancels escrow and returns funds to maker\n     * @dev Can only be called after cancellation period starts\n     * @param immutables The escrow immutables\n     */\n    function cancel(Immutables calldata immutables)\n        external\n        override\n        onlyMaker(immutables)\n        onlyValidImmutables(immutables)\n        onlyAfter(immutables.timelocks.get(TimelocksLib.Stage.DstCancellation))\n    {\n        // Return tokens to maker\n        _uniTransfer(immutables.token.get(), immutables.maker.get(), immutables.amount);\n        // Return safety deposit to maker\n        _ethTransfer(immutables.maker.get(), immutables.safetyDeposit);\n        \n        emit EscrowCancelled();\n    }\n\n    /**\n     * @notice Records Stacks address for the swap\n     * @dev Links Stacks address to escrow for verification\n     * @param hashlock The escrow hashlock\n     * @param stxAddress The Stacks address where funds should be sent\n     * @param immutables The escrow immutables\n     */\n    function recordStacksAddress(\n        bytes32 hashlock,\n        string calldata stxAddress,\n        Immutables calldata immutables\n    )\n        external\n        onlyValidImmutables(immutables)\n    {\n        // Only maker can record Stacks address\n        if (msg.sender != immutables.maker.get()) {\n            revert InvalidCaller();\n        }\n\n        stacksAddresses[hashlock] = stxAddress;\n        emit StacksAddressRecorded(hashlock, stxAddress);\n    }\n\n    /**\n     * @notice Records Stacks transaction hash for verification\n     * @dev Optional function to link Stacks transaction to escrow\n     * @param hashlock The escrow hashlock\n     * @param stxTxHash The Stacks transaction hash\n     * @param immutables The escrow immutables\n     */\n    function recordStacksTx(\n        bytes32 hashlock,\n        string calldata stxTxHash,\n        Immutables calldata immutables\n    )\n        external\n        onlyValidImmutables(immutables)\n    {\n        // Only taker can record Stacks tx (proof of payment)\n        if (msg.sender != immutables.taker.get()) {\n            revert InvalidCaller();\n        }\n\n        stacksTxHashes[hashlock] = stxTxHash;\n        emit StacksTxHashRecorded(hashlock, stxTxHash);\n    }\n\n    /**\n     * @notice Gets recorded Stacks address\n     * @param hashlock The escrow hashlock\n     * @return The Stacks address\n     */\n    function getStacksAddress(bytes32 hashlock) external view returns (string memory) {\n        return stacksAddresses[hashlock];\n    }\n\n    /**\n     * @notice Gets recorded Stacks transaction hash\n     * @param hashlock The escrow hashlock\n     * @return The Stacks transaction hash\n     */\n    function getStacksTxHash(bytes32 hashlock) external view returns (string memory) {\n        return stacksTxHashes[hashlock];\n    }\n\n    /**\n     * @dev Internal withdrawal logic\n     * @param secret The secret that unlocks the escrow\n     * @param immutables The escrow immutables\n     */\n    function _withdraw(bytes32 secret, Immutables calldata immutables) internal {\n        // Transfer tokens to taker\n        _uniTransfer(immutables.token.get(), immutables.taker.get(), immutables.amount);\n        \n        // Return safety deposit to maker\n        _ethTransfer(immutables.maker.get(), immutables.safetyDeposit);\n        \n        emit EscrowWithdrawal(secret);\n    }\n} "
      }
    }
  }
}